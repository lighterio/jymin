/**
 * Ensure a value is a string.
 */
Jymin.ensureString = function (value) {
  return Jymin.isString(value) ? value : '' + value;
};

/**
 * Return true if the string contains the given substring.
 */
Jymin.contains = function (string, substring) {
  return Jymin.ensureString(string).indexOf(substring) > -1;
};

/**
 * Return true if the string starts with the given substring.
 */
Jymin.startsWith = function (string, substring) {
  return Jymin.ensureString(string).indexOf(substring) == 0; // jshint ignore:line
};

/**
 * Trim the whitespace from a string.
 */
Jymin.trim = function (string) {
  return Jymin.ensureString(string).replace(/^\s+|\s+$/g, '');
};

/**
 * Split a string by commas.
 */
Jymin.splitByCommas = function (string) {
  return Jymin.ensureString(string).split(',');
};

/**
 * Split a string by spaces.
 */
Jymin.splitBySpaces = function (string) {
  return Jymin.ensureString(string).split(' ');
};

/**
 * Return a string, with asterisks replaced by values from a replacements array.
 */
Jymin.decorateString = function (string, replacements) {
  string = Jymin.ensureString(string);
  Jymin.forEach(replacements, function(replacement) {
    string = string.replace('*', replacement);
  });
  return string;
};

/**
 * Perform a RegExp Jymin.match, and call a callback on the result;
  */
Jymin.match = function (string, pattern, callback) {
  var result = string.match(pattern);
  if (result) {
    callback.apply(string, result);
  }
};

/**
 * Reduce a string to its alphabetic characters.
 */
Jymin.extractLetters = function (string) {
  return Jymin.ensureString(string).replace(/[^a-z]/ig, '');
};

/**
 * Reduce a string to its numeric characters.
 */
Jymin.extractNumbers = function (string) {
  return Jymin.ensureString(string).replace(/[^0-9]/g, '');
};

/**
 * Returns a lowercase string.
 */
Jymin.lower = function (object) {
  return Jymin.ensureString(object).toLowerCase();
};

/**
 * Returns an uppercase string.
 */
Jymin.upper = function (object) {
  return Jymin.ensureString(object).toUpperCase();
};

/**
 * Return an escaped value for URLs.
 */
Jymin.escape = function (value) {
  return '' + encodeURIComponent('' + value);
};

/**
 * Return an unescaped value from an escaped URL.
 */
Jymin.unescape = function (value) {
  return '' + decodeURIComponent('' + value);
};

/**
 * Returns a query string generated by serializing an object and joined using a delimiter (defaults to '&')
 */
Jymin.buildQueryString = function (object) {
  var queryParams = [];
  Jymin.forIn(object, function(key, value) {
    queryParams.push(Jymin.escape(key) + '=' + Jymin.escape(value));
  });
  return queryParams.join('&');
};

/**
 * Return the browser version if the browser name matches or zero if it doesn't.
 */
Jymin.getBrowserVersionOrZero = function (browserName) {
  var match = new RegExp(browserName + '[ /](\\d+(\\.\\d+)?)', 'i').exec(navigator.userAgent);
  return match ? +Jymin.match[1] : 0;
};
